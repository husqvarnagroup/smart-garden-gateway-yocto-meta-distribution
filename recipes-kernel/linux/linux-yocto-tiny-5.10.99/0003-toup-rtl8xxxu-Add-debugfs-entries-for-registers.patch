From 60ca1843f954c2f4c70413841a42f4e40622c5d8 Mon Sep 17 00:00:00 2001
From: Chris Chiu <chris.chiu@canonical.com>
Date: Thu, 30 Sep 2021 17:11:37 +0800
Subject: [PATCH] [toup] rtl8xxxu: Add debugfs entries for registers

Dump register contents of MAC, baseband, and RF for debugging. It will
help cross-comparison with the same entries in the vendor driver. The
goal is to find out the differences which cause worse retransmission rate
and throughput on the rtl8xxxu driver.

Signed-Off-By: Chris Chiu <chrischiu@canonical.com>
---
 .../net/wireless/realtek/rtl8xxxu/rtl8xxxu.h  |   1 +
 .../wireless/realtek/rtl8xxxu/rtl8xxxu_core.c | 131 ++++++++++++++++++
 2 files changed, 132 insertions(+)

diff --git a/drivers/net/wireless/realtek/rtl8xxxu/rtl8xxxu.h b/drivers/net/wireless/realtek/rtl8xxxu/rtl8xxxu.h
index b28fa0c4d180..6a98e1165df1 100644
--- a/drivers/net/wireless/realtek/rtl8xxxu/rtl8xxxu.h
+++ b/drivers/net/wireless/realtek/rtl8xxxu/rtl8xxxu.h
@@ -1391,6 +1391,7 @@ struct rtl8xxxu_priv {
 	spinlock_t c2hcmd_lock;
 	struct rtl8xxxu_btcoex bt_coex;
 	struct rtl8xxxu_ra_report ra_report;
+	struct dentry *debugfs_dir;
 };
 
 struct rtl8xxxu_rx_urb {
diff --git a/drivers/net/wireless/realtek/rtl8xxxu/rtl8xxxu_core.c b/drivers/net/wireless/realtek/rtl8xxxu/rtl8xxxu_core.c
index 0d374a294840..25f5bf994362 100644
--- a/drivers/net/wireless/realtek/rtl8xxxu/rtl8xxxu_core.c
+++ b/drivers/net/wireless/realtek/rtl8xxxu/rtl8xxxu_core.c
@@ -6451,6 +6451,133 @@ static void rtl8xxxu_stop(struct ieee80211_hw *hw)
 	rtl8xxxu_free_tx_resources(priv);
 }
 
+#include <linux/debugfs.h>
+#include <linux/seq_file.h>
+
+struct rtl8xxxu_debugfs_priv {
+	struct rtl8xxxu_priv *priv;
+	int (*cb_read)(struct seq_file *m, void *v);
+	ssize_t (*cb_write)(struct file *filp, const char __user *buffer,
+			    size_t count, loff_t *loff);
+	u32 cb_data;
+};
+
+static int rtl8xxxu_debug_get_common(struct seq_file *m, void *v)
+{
+	struct rtl8xxxu_debugfs_priv *debugfs_priv = m->private;
+
+	return debugfs_priv->cb_read(m, v);
+}
+
+static int dl_debug_open_common(struct inode *inode, struct file *file)
+{
+	return single_open(file, rtl8xxxu_debug_get_common, inode->i_private);
+}
+
+static const struct file_operations file_ops_common = {
+	.open = dl_debug_open_common,
+	.read = seq_read,
+	.llseek = seq_lseek,
+	.release = single_release,
+};
+
+static int rtl8xxxu_debug_get_macregs(struct seq_file *m, void *v)
+{
+	struct rtl8xxxu_debugfs_priv *debugfs_priv = m->private;
+	struct rtl8xxxu_priv *priv = debugfs_priv->priv;
+	int i, j = 1;
+
+	seq_printf(m, "======= MAC REG (rtl8xxxu) =======\n");
+	for (i = 0; i < 0x800; i += 4) {
+		if (j % 4 == 1)
+			seq_printf(m, "0x%03x", i);
+		seq_printf(m, " 0x%08x ", rtl8xxxu_read32(priv, i));
+		if ((j++) % 4 == 0)
+			seq_puts(m, "\n");
+	}
+	return 0;
+}
+
+static struct rtl8xxxu_debugfs_priv rtl8xxxu_debug_priv_macregs = {
+	.cb_read = rtl8xxxu_debug_get_macregs,
+	.cb_data = 0,
+};
+
+static int rtl8xxxu_debug_get_bbregs(struct seq_file *m, void *v)
+{
+	struct rtl8xxxu_debugfs_priv *debugfs_priv = m->private;
+	struct rtl8xxxu_priv *priv = debugfs_priv->priv;
+	int i, j = 1;
+
+	seq_printf(m, "======= BB REG (rtl8xxxu) =======\n");
+	for (i = 0x800; i < 0x1000; i += 4) {
+		if (j % 4 == 1)
+			seq_printf(m, "0x%03x", i);
+		seq_printf(m, " 0x%08x ", rtl8xxxu_read32(priv, i));
+		if ((j++) % 4 == 0)
+			seq_puts(m, "\n");
+	}
+	return 0;
+}
+
+static struct rtl8xxxu_debugfs_priv rtl8xxxu_debug_priv_bbregs = {
+	.cb_read = rtl8xxxu_debug_get_bbregs,
+	.cb_data = 0,
+};
+
+static int rtl8xxxu_debug_get_rfregs(struct seq_file *m, void *v)
+{
+	struct rtl8xxxu_debugfs_priv *debugfs_priv = m->private;
+	struct rtl8xxxu_priv *priv = debugfs_priv->priv;
+	int i, j = 1, path, path_nums;
+
+	if (priv->tx_paths == 1)
+		path_nums = 1;
+	else
+		path_nums = 2;
+
+	for (path = 0; path < path_nums; path++) {
+		seq_printf(m, "======= RF REG (rtl8xxxu) =======\n");
+		seq_printf(m, "RF_Path(%x)\n", path);
+		for (i = 0; i < 0x100; i++) {
+			if (j % 4 == 1)
+				seq_printf(m, "0x%02x ", i);
+			seq_printf(m, " 0x%08x ",
+				   rtl8xxxu_read_rfreg(priv, path, i));
+			if ((j++) % 4 == 0)
+				seq_puts(m, "\n");
+		}
+	}
+	return 0;
+}
+
+static struct rtl8xxxu_debugfs_priv rtl8xxxu_debug_priv_rfregs = {
+	.cb_read = rtl8xxxu_debug_get_rfregs,
+	.cb_data = 0,
+};
+
+void rtl8xxxu_debugfs_init(struct rtl8xxxu_priv *priv)
+{
+	priv->debugfs_dir =
+		debugfs_create_dir("rtl8xxxu", priv->hw->wiphy->debugfsdir);
+
+	rtl8xxxu_debug_priv_macregs.priv = priv;
+	debugfs_create_file("mac_reg_dump", S_IFREG | 0400, priv->debugfs_dir,
+			    &rtl8xxxu_debug_priv_macregs, &file_ops_common);
+	rtl8xxxu_debug_priv_bbregs.priv = priv;
+	debugfs_create_file("bb_reg_dump", S_IFREG | 0400, priv->debugfs_dir,
+			    &rtl8xxxu_debug_priv_bbregs, &file_ops_common);
+	rtl8xxxu_debug_priv_rfregs.priv = priv;
+	debugfs_create_file("rf_reg_dump", S_IFREG | 0400, priv->debugfs_dir,
+			    &rtl8xxxu_debug_priv_rfregs, &file_ops_common);
+}
+
+void rtl8xxxu_debugfs_remove(struct rtl8xxxu_priv *priv)
+{
+	debugfs_remove_recursive(priv->debugfs_dir);
+	priv->debugfs_dir = NULL;
+}
+
 static const struct ieee80211_ops rtl8xxxu_ops = {
 	.tx = rtl8xxxu_tx,
 	.add_interface = rtl8xxxu_add_interface,
@@ -6712,6 +6839,8 @@ static int rtl8xxxu_probe(struct usb_interface *interface,
 		goto exit;
 	}
 
+	rtl8xxxu_debugfs_init(priv);
+
 	return 0;
 
 exit:
@@ -6737,6 +6866,8 @@ static void rtl8xxxu_disconnect(struct usb_interface *interface)
 	hw = usb_get_intfdata(interface);
 	priv = hw->priv;
 
+	rtl8xxxu_debugfs_remove(priv);
+
 	ieee80211_unregister_hw(hw);
 
 	priv->fops->power_off(priv);
-- 
2.30.2

